# syntax=docker/dockerfile:1

# Multi-stage build for optimized production image
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./
# Install pnpm
RUN npm install -g pnpm@10.7.1
# Install dependencies
RUN pnpm install --frozen-lockfile

# Build stage
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set environment variables for web deployment
ENV DEPLOYMENT_TARGET=web
ENV NEXT_TELEMETRY_DISABLED=1

# Install pnpm in builder stage
RUN npm install -g pnpm@10.7.1

# Build the application using web-specific config
RUN cp next.config.web.ts next.config.ts
RUN pnpm run next:build

# Production image - using scratch for minimal size
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV DEPLOYMENT_TARGET=web
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copy the standalone build
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Expose port 3000 (matches defaultPort in container class)
EXPOSE 3000

# Start the application
CMD ["node", "server.js"]